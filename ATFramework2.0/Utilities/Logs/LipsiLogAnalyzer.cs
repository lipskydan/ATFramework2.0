namespace ATFramework2._0.Utilities.Logs;

/// <summary>
/// LIPSI ‚Äî Log-based Inference of Priority in Software Issues
/// –ê–≤—Ç–æ—Ä—Å—å–∫–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ª–æ–≥—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—é –±–∞–≥—ñ–≤.
/// –ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è:
/// - –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤;
/// - –ª–æ–≥—ñ—Å—Ç–∏—á–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó;
/// - –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –≤–∞–≥–æ–≤–æ–≥–æ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è;
/// - —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É;
/// - —ñ—Å—Ç–æ—Ä–∏—á–Ω–æ–≥–æ —Ä–∏–∑–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
/// </summary>
public class LipsiLogAnalyzer
{
    private readonly List<LogEntry> _logs;
    private readonly double[] _baseWeights = [2.0, 1.5, 3.0, 0.01]; // Info, Warning, Error, Length
    private readonly string[] _criticalKeywords = ["exception", "timeout", "fatal", "crash", "stacktrace"];
    private readonly string[] _warningKeywords = ["retry", "slow", "deprecated", "delay"];
    private readonly Dictionary<string, double> _contextRiskMap;

    public LipsiLogAnalyzer(List<LogEntry> logs)
    {
        _logs = logs ?? [];
        _contextRiskMap = CalculateContextRisks(); // –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—ñ–≤ –¥–ª—è Context
    }

    /// <summary>
    /// –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ LIPSI-–∞–Ω–∞–ª—ñ–∑—É.
    /// </summary>
    public List<string> Analyze()
    {
        return _logs.Select(log =>
        {
            // üîπ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞: —à–≤–∏–¥–∫–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è
            if (ContainsKeywords(log, _criticalKeywords)) return "Critical";
            if (ContainsKeywords(log, _warningKeywords)) return "High Priority";

            // üîπ –õ–æ–≥—ñ—Å—Ç–∏—á–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ—ñ—á
            var features = ExtractFeatures(log);
            var dynamicWeights = AdjustWeights(log);
            double score = CalculateScore(features, dynamicWeights);

            // üîπ –ü–æ—Ä–æ–≥–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—É–º–∞—Ä–Ω–æ—ó –æ—Ü—ñ–Ω–∫–∏
            if (score > 8.0) return "Critical";
            if (score > 6.0) return "High Priority";
            if (score > 4.0) return "Normal";
            return "Low Priority";
        }).ToList();
    }

    private bool ContainsKeywords(LogEntry log, string[] keywords)
    {
        return keywords.Any(k => log.Message.Contains(k, StringComparison.OrdinalIgnoreCase));
    }

    private double[] ExtractFeatures(LogEntry log)
    {
        return
        [
            log.Level == LogLevel.Info ? 1 : 0,
                log.Level == LogLevel.Warning ? 1 : 0,
                log.Level == LogLevel.Error ? 1 : 0,
                log.Message.Length
        ];
    }

    private double CalculateScore(double[] features, double[] weights)
    {
        return features.Zip(weights, (f, w) => f * w).Sum();
    }

    /// <summary>
    /// –î–∏–Ω–∞–º—ñ—á–Ω–∞ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—è –≤–∞–≥ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —á–∞—Å—Ç–æ—Ç–∏ –ø–æ–º–∏–ª–æ–∫ —ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ —Ä–∏–∑–∏–∫—É.
    /// </summary>
    private double[] AdjustWeights(LogEntry log)
    {
        int recentErrors = _logs.Count(l => l.Level == LogLevel.Error && l.Timestamp > DateTime.Now.AddMinutes(-5));
        double timeFactor = 1 + (recentErrors > 5 ? 0.2 : 0);

        double contextWeight = _contextRiskMap.TryGetValue(log.Context, out double risk) ? risk : 1.0;

        return _baseWeights.Select(w => w * timeFactor * contextWeight).ToArray();
    }

    /// <summary>
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ä—ñ–≤–Ω—è —Ä–∏–∑–∏–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ–≤ (Context).
    /// </summary>
    private Dictionary<string, double> CalculateContextRisks()
    {
        var contextGroups = _logs.GroupBy(l => l.Context);
        var result = new Dictionary<string, double>();

        foreach (var group in contextGroups)
        {
            int total = group.Count();
            int errors = group.Count(g => g.Level == LogLevel.Error || g.Level == LogLevel.Critical);
            double factor = 1 + (double)errors / Math.Max(1, total); // [1, 2]
            result[group.Key] = factor;
        }

        return result;
    }
}